// Generated by gencpp from file detection/obstacle_bound.msg
// DO NOT EDIT!


#ifndef DETECTION_MESSAGE_OBSTACLE_BOUND_H
#define DETECTION_MESSAGE_OBSTACLE_BOUND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detection
{
template <class ContainerAllocator>
struct obstacle_bound_
{
  typedef obstacle_bound_<ContainerAllocator> Type;

  obstacle_bound_()
    : top_left_x(0)
    , top_left_y(0)
    , bottom_right_x(0)
    , bottom_right_y(0)
    , distance(0.0)  {
    }
  obstacle_bound_(const ContainerAllocator& _alloc)
    : top_left_x(0)
    , top_left_y(0)
    , bottom_right_x(0)
    , bottom_right_y(0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _top_left_x_type;
  _top_left_x_type top_left_x;

   typedef int16_t _top_left_y_type;
  _top_left_y_type top_left_y;

   typedef int16_t _bottom_right_x_type;
  _bottom_right_x_type bottom_right_x;

   typedef int16_t _bottom_right_y_type;
  _bottom_right_y_type bottom_right_y;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::detection::obstacle_bound_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection::obstacle_bound_<ContainerAllocator> const> ConstPtr;

}; // struct obstacle_bound_

typedef ::detection::obstacle_bound_<std::allocator<void> > obstacle_bound;

typedef boost::shared_ptr< ::detection::obstacle_bound > obstacle_boundPtr;
typedef boost::shared_ptr< ::detection::obstacle_bound const> obstacle_boundConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection::obstacle_bound_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection::obstacle_bound_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection::obstacle_bound_<ContainerAllocator1> & lhs, const ::detection::obstacle_bound_<ContainerAllocator2> & rhs)
{
  return lhs.top_left_x == rhs.top_left_x &&
    lhs.top_left_y == rhs.top_left_y &&
    lhs.bottom_right_x == rhs.bottom_right_x &&
    lhs.bottom_right_y == rhs.bottom_right_y &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection::obstacle_bound_<ContainerAllocator1> & lhs, const ::detection::obstacle_bound_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::detection::obstacle_bound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection::obstacle_bound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection::obstacle_bound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection::obstacle_bound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection::obstacle_bound_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection::obstacle_bound_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection::obstacle_bound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41b15b11d68bbfaa7472618894c283f6";
  }

  static const char* value(const ::detection::obstacle_bound_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41b15b11d68bbfaaULL;
  static const uint64_t static_value2 = 0x7472618894c283f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::detection::obstacle_bound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection/obstacle_bound";
  }

  static const char* value(const ::detection::obstacle_bound_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection::obstacle_bound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 top_left_x\n"
"int16 top_left_y\n"
"int16 bottom_right_x\n"
"int16 bottom_right_y\n"
"float32 distance\n"
;
  }

  static const char* value(const ::detection::obstacle_bound_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection::obstacle_bound_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.top_left_x);
      stream.next(m.top_left_y);
      stream.next(m.bottom_right_x);
      stream.next(m.bottom_right_y);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obstacle_bound_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection::obstacle_bound_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection::obstacle_bound_<ContainerAllocator>& v)
  {
    s << indent << "top_left_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.top_left_x);
    s << indent << "top_left_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.top_left_y);
    s << indent << "bottom_right_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bottom_right_x);
    s << indent << "bottom_right_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bottom_right_y);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_MESSAGE_OBSTACLE_BOUND_H
